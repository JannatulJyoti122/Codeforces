#include <bits/stdc++.h>
using namespace std;
using ll=long long int;
int main() {
    int t=1;
    cin >> t;
    while (t--) {
        int n,m;
        cin>>n>>m;
        int ind[n+1][m+1];
        char s[n+1][m+1];
        int idx=0;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++) {
                cin>>s[i][j];
                idx++;
                ind[i][j]=idx;
            }
        }
        int tot_node=(n*m)+2;
        vector<vector<int>>graph(tot_node);
        for(int i=1;i<=m;i++){
            if(s[1][i]=='U'){
                graph[i].push_back(tot_node-1);
                graph[tot_node-1].push_back(i);
            }
            if(s[n][i]=='D'){
                int temp=ind[n][i];
                graph[temp].push_back(tot_node-1);
                graph[tot_node-1].push_back(temp);
            }
        }
        for(int i=1;i<=n;i++){
            if(s[i][1]=='L'){
                int temp=ind[i][1];
                graph[temp].push_back(tot_node-1);
                graph[tot_node-1].push_back(temp);
            }
            if(s[i][m]=='R'){
                int temp=ind[i][m];
                graph[temp].push_back(tot_node-1);
                graph[tot_node-1].push_back(temp);
            }
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i][j]=='U'&&i==1) continue;
                if(s[i][j]=='L'&&j==1) continue;
                if(s[i][j]=='R'&&j==m) continue;
                if(s[i][j]=='D'&&i==n) continue;
                if(s[i][j]=='?') continue;
                int t1,t2;
                if(s[i][j]=='U'){
                    t1=ind[i][j];
                    t2=ind[i-1][j];
                }
                else if(s[i][j]=='D'){
                    t1=ind[i][j];
                    t2=ind[i+1][j];
                }
                else if(s[i][j]=='L'){
                    t1=ind[i][j];
                    t2=ind[i][j-1];
                }
                else if(s[i][j]=='R'){
                    t1=ind[i][j];
                    t2=ind[i][j+1];
                }
                graph[t1].push_back(t2);
                graph[t2].push_back(t1);
            }
        }
        stack<int>st;
        st.push(tot_node-1);
        vector<int>vis(tot_node,0);
        int ct=0;
        while(!st.empty()){
            int temp=st.top();
            st.pop();
            vis[temp]=1;
            if(temp<tot_node-1) ct++;
            for(int i=0;i<graph[temp].size();i++){
                if(vis[graph[temp][i]]==0){
                    st.push(graph[temp][i]);
                }
            }
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i][j]=='?'){
                    int temp=ind[i][j];
                    int f=0;
                    if(i-1>0){
                        int t1=ind[i-1][j];
                        if(vis[t1]==0) f=1;
                    }
                    if(i+1<=n){
                        int t1=ind[i+1][j];
                        if(vis[t1]==0) f++;
                    }
                    if(j-1>0){
                        int t1=ind[i][j-1];
                        if(vis[t1]==0) f++;
                    }
                    if(j+1<=m){
                        int t1=ind[i][j+1];
                        if(vis[t1]==0) f++;
                    }

                    if(f==0){ vis[temp]=1;ct++;}
                }
            }
        }
        cout<<(m*n)-ct<<endl;
    }
}
